# Generated by Django 4.2.7 on 2025-09-04 16:34

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="AIModelPerformance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "model_type",
                    models.CharField(
                        choices=[
                            ("demand_forecasting", "Demand Forecasting"),
                            ("dynamic_pricing", "Dynamic Pricing"),
                            ("route_optimization", "Route Optimization"),
                            ("risk_prediction", "Risk Prediction"),
                        ],
                        max_length=30,
                    ),
                ),
                ("model_version", models.CharField(max_length=20)),
                ("accuracy_score", models.DecimalField(decimal_places=3, max_digits=5)),
                (
                    "precision_score",
                    models.DecimalField(decimal_places=3, max_digits=5),
                ),
                ("recall_score", models.DecimalField(decimal_places=3, max_digits=5)),
                ("f1_score", models.DecimalField(decimal_places=3, max_digits=5)),
                ("training_data_size", models.IntegerField()),
                (
                    "training_duration_minutes",
                    models.DecimalField(decimal_places=2, max_digits=8),
                ),
                ("last_trained", models.DateTimeField()),
                (
                    "cost_savings_generated",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=12),
                ),
                (
                    "revenue_impact",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=12),
                ),
                ("hyperparameters", models.JSONField(default=dict)),
                ("feature_importance", models.JSONField(default=dict)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "AI Model Performance",
                "verbose_name_plural": "AI Model Performance",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="DeliveryLocation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("address", models.TextField()),
                ("latitude", models.DecimalField(decimal_places=7, max_digits=10)),
                ("longitude", models.DecimalField(decimal_places=7, max_digits=10)),
                ("delivery_time_window_start", models.TimeField()),
                ("delivery_time_window_end", models.TimeField()),
                ("max_delivery_weight_kg", models.IntegerField(default=1000)),
                ("avg_delivery_time_minutes", models.IntegerField(default=30)),
                (
                    "access_difficulty_score",
                    models.IntegerField(
                        default=1,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Delivery Location",
                "verbose_name_plural": "Delivery Locations",
            },
        ),
        migrations.CreateModel(
            name="Product",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("sku", models.CharField(max_length=50, unique=True)),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("electronics", "Electronics"),
                            ("software", "Software"),
                            ("hardware", "Hardware"),
                            ("services", "Services"),
                            ("consumables", "Consumables"),
                        ],
                        max_length=20,
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("base_cost", models.DecimalField(decimal_places=2, max_digits=12)),
                ("current_price", models.DecimalField(decimal_places=2, max_digits=12)),
                ("min_price", models.DecimalField(decimal_places=2, max_digits=12)),
                ("max_price", models.DecimalField(decimal_places=2, max_digits=12)),
                ("current_stock", models.IntegerField(default=0)),
                ("reorder_level", models.IntegerField(default=10)),
                ("max_stock_level", models.IntegerField(default=1000)),
                (
                    "weight_kg",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=8),
                ),
                ("dimensions_cm", models.CharField(blank=True, max_length=50)),
                ("enable_demand_forecasting", models.BooleanField(default=True)),
                ("enable_dynamic_pricing", models.BooleanField(default=True)),
                ("seasonal_factor", models.JSONField(blank=True, default=dict)),
                (
                    "demand_volatility",
                    models.DecimalField(decimal_places=3, default=0.2, max_digits=5),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Product",
                "verbose_name_plural": "Products",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="RouteOptimization",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("route_name", models.CharField(max_length=100)),
                ("delivery_date", models.DateField()),
                (
                    "total_distance_km",
                    models.DecimalField(decimal_places=2, max_digits=8),
                ),
                (
                    "total_time_hours",
                    models.DecimalField(decimal_places=2, max_digits=6),
                ),
                ("total_cost", models.DecimalField(decimal_places=2, max_digits=10)),
                ("fuel_cost", models.DecimalField(decimal_places=2, max_digits=10)),
                ("driver_cost", models.DecimalField(decimal_places=2, max_digits=10)),
                ("algorithm_used", models.CharField(max_length=50)),
                (
                    "optimization_time_seconds",
                    models.DecimalField(decimal_places=2, max_digits=8),
                ),
                (
                    "cost_savings_percentage",
                    models.DecimalField(decimal_places=2, max_digits=5),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("optimizing", "Optimizing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("is_implemented", models.BooleanField(default=False)),
                ("implementation_feedback", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Route Optimization",
                "verbose_name_plural": "Route Optimizations",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Supplier",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("code", models.CharField(max_length=20, unique=True)),
                ("contact_person", models.CharField(max_length=100)),
                ("email", models.EmailField(max_length=254)),
                ("phone", models.CharField(max_length=20)),
                ("address", models.TextField()),
                ("city", models.CharField(max_length=100)),
                ("state", models.CharField(max_length=100)),
                ("country", models.CharField(max_length=100)),
                ("postal_code", models.CharField(max_length=20)),
                (
                    "reliability_score",
                    models.CharField(
                        choices=[
                            ("excellent", "Excellent (95-100%)"),
                            ("good", "Good (85-94%)"),
                            ("average", "Average (70-84%)"),
                            ("poor", "Poor (<70%)"),
                        ],
                        default="average",
                        max_length=20,
                    ),
                ),
                ("avg_delivery_time_days", models.IntegerField(default=7)),
                (
                    "on_time_delivery_rate",
                    models.DecimalField(decimal_places=2, default=85.0, max_digits=5),
                ),
                (
                    "quality_score",
                    models.DecimalField(decimal_places=2, default=8.0, max_digits=5),
                ),
                (
                    "financial_stability",
                    models.DecimalField(decimal_places=2, default=0.8, max_digits=3),
                ),
                (
                    "geographic_risk",
                    models.DecimalField(decimal_places=2, default=0.2, max_digits=3),
                ),
                ("payment_terms_days", models.IntegerField(default=30)),
                (
                    "minimum_order_value",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=12),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Supplier",
                "verbose_name_plural": "Suppliers",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="SupplyChainConfig",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("demand_forecasting_enabled", models.BooleanField(default=True)),
                ("dynamic_pricing_enabled", models.BooleanField(default=True)),
                ("route_optimization_enabled", models.BooleanField(default=True)),
                ("risk_management_enabled", models.BooleanField(default=True)),
                (
                    "forecasting_horizon_days",
                    models.IntegerField(
                        default=90,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(365),
                        ],
                    ),
                ),
                (
                    "seasonal_adjustment_factor",
                    models.DecimalField(decimal_places=3, default=1.0, max_digits=5),
                ),
                (
                    "demand_sensitivity",
                    models.DecimalField(decimal_places=3, default=0.8, max_digits=5),
                ),
                (
                    "min_profit_margin",
                    models.DecimalField(decimal_places=2, default=15.0, max_digits=5),
                ),
                (
                    "max_price_adjustment",
                    models.DecimalField(decimal_places=2, default=20.0, max_digits=5),
                ),
                (
                    "competitor_weight",
                    models.DecimalField(decimal_places=2, default=0.3, max_digits=3),
                ),
                (
                    "market_weight",
                    models.DecimalField(decimal_places=2, default=0.4, max_digits=3),
                ),
                (
                    "inventory_weight",
                    models.DecimalField(decimal_places=2, default=0.3, max_digits=3),
                ),
                (
                    "fuel_cost_per_km",
                    models.DecimalField(decimal_places=2, default=1.5, max_digits=10),
                ),
                (
                    "driver_cost_per_hour",
                    models.DecimalField(decimal_places=2, default=25.0, max_digits=10),
                ),
                ("vehicle_capacity_kg", models.IntegerField(default=1000)),
                ("max_delivery_distance_km", models.IntegerField(default=500)),
                (
                    "risk_threshold_high",
                    models.DecimalField(decimal_places=2, default=0.8, max_digits=3),
                ),
                (
                    "risk_threshold_medium",
                    models.DecimalField(decimal_places=2, default=0.5, max_digits=3),
                ),
                ("alert_notification_enabled", models.BooleanField(default=True)),
                ("ai_model_update_frequency_hours", models.IntegerField(default=24)),
                ("data_retention_days", models.IntegerField(default=365)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "updated_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Supply Chain Configuration",
                "verbose_name_plural": "Supply Chain Configurations",
            },
        ),
        migrations.CreateModel(
            name="RouteStop",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("stop_order", models.IntegerField()),
                ("estimated_arrival_time", models.TimeField()),
                ("estimated_service_time_minutes", models.IntegerField()),
                (
                    "delivery_weight_kg",
                    models.DecimalField(decimal_places=2, max_digits=8),
                ),
                (
                    "distance_from_previous_km",
                    models.DecimalField(decimal_places=2, max_digits=8),
                ),
                ("travel_time_from_previous_minutes", models.IntegerField()),
                (
                    "location",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ai_supply_chain.deliverylocation",
                    ),
                ),
                (
                    "route",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ai_supply_chain.routeoptimization",
                    ),
                ),
            ],
            options={
                "verbose_name": "Route Stop",
                "verbose_name_plural": "Route Stops",
                "ordering": ["route", "stop_order"],
            },
        ),
        migrations.AddField(
            model_name="routeoptimization",
            name="delivery_locations",
            field=models.ManyToManyField(
                through="ai_supply_chain.RouteStop",
                to="ai_supply_chain.deliverylocation",
            ),
        ),
        migrations.AddField(
            model_name="routeoptimization",
            name="start_location",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="routes_starting",
                to="ai_supply_chain.deliverylocation",
            ),
        ),
        migrations.CreateModel(
            name="RiskFactor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                (
                    "risk_type",
                    models.CharField(
                        choices=[
                            ("supplier", "Supplier Risk"),
                            ("logistics", "Logistics Risk"),
                            ("market", "Market Risk"),
                            ("financial", "Financial Risk"),
                            ("operational", "Operational Risk"),
                            ("external", "External Risk"),
                        ],
                        max_length=20,
                    ),
                ),
                ("description", models.TextField()),
                ("probability", models.DecimalField(decimal_places=3, max_digits=5)),
                ("impact_score", models.DecimalField(decimal_places=2, max_digits=5)),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        max_length=20,
                    ),
                ),
                ("monitoring_frequency_hours", models.IntegerField(default=24)),
                ("mitigation_strategy", models.TextField()),
                ("contingency_plan", models.TextField(blank=True)),
                ("is_active", models.BooleanField(default=True)),
                ("last_assessed", models.DateTimeField(auto_now=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "affected_products",
                    models.ManyToManyField(blank=True, to="ai_supply_chain.product"),
                ),
                (
                    "affected_suppliers",
                    models.ManyToManyField(blank=True, to="ai_supply_chain.supplier"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Risk Factor",
                "verbose_name_plural": "Risk Factors",
                "ordering": ["-impact_score", "-probability"],
            },
        ),
        migrations.CreateModel(
            name="RiskAlert",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "alert_type",
                    models.CharField(
                        choices=[
                            ("demand_spike", "Demand Spike"),
                            ("supplier_delay", "Supplier Delay"),
                            ("stock_shortage", "Stock Shortage"),
                            ("price_volatility", "Price Volatility"),
                            ("route_disruption", "Route Disruption"),
                            ("quality_issue", "Quality Issue"),
                            ("external_event", "External Event"),
                        ],
                        max_length=20,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "confidence_score",
                    models.DecimalField(decimal_places=3, max_digits=5),
                ),
                ("risk_score", models.DecimalField(decimal_places=2, max_digits=5)),
                ("predicted_impact", models.TextField()),
                ("recommended_actions", models.JSONField(default=list)),
                (
                    "estimated_cost_impact",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=12, null=True
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("new", "New"),
                            ("acknowledged", "Acknowledged"),
                            ("investigating", "Investigating"),
                            ("resolved", "Resolved"),
                            ("false_positive", "False Positive"),
                        ],
                        default="new",
                        max_length=20,
                    ),
                ),
                ("resolution_notes", models.TextField(blank=True)),
                ("resolved_at", models.DateTimeField(blank=True, null=True)),
                ("email_sent", models.BooleanField(default=False)),
                ("sms_sent", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "affected_products",
                    models.ManyToManyField(blank=True, to="ai_supply_chain.product"),
                ),
                (
                    "affected_suppliers",
                    models.ManyToManyField(blank=True, to="ai_supply_chain.supplier"),
                ),
                (
                    "assigned_to",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "risk_factors",
                    models.ManyToManyField(blank=True, to="ai_supply_chain.riskfactor"),
                ),
            ],
            options={
                "verbose_name": "Risk Alert",
                "verbose_name_plural": "Risk Alerts",
                "ordering": ["-created_at", "-risk_score"],
            },
        ),
        migrations.CreateModel(
            name="HistoricalSupplyChainConfig",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("demand_forecasting_enabled", models.BooleanField(default=True)),
                ("dynamic_pricing_enabled", models.BooleanField(default=True)),
                ("route_optimization_enabled", models.BooleanField(default=True)),
                ("risk_management_enabled", models.BooleanField(default=True)),
                (
                    "forecasting_horizon_days",
                    models.IntegerField(
                        default=90,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(365),
                        ],
                    ),
                ),
                (
                    "seasonal_adjustment_factor",
                    models.DecimalField(decimal_places=3, default=1.0, max_digits=5),
                ),
                (
                    "demand_sensitivity",
                    models.DecimalField(decimal_places=3, default=0.8, max_digits=5),
                ),
                (
                    "min_profit_margin",
                    models.DecimalField(decimal_places=2, default=15.0, max_digits=5),
                ),
                (
                    "max_price_adjustment",
                    models.DecimalField(decimal_places=2, default=20.0, max_digits=5),
                ),
                (
                    "competitor_weight",
                    models.DecimalField(decimal_places=2, default=0.3, max_digits=3),
                ),
                (
                    "market_weight",
                    models.DecimalField(decimal_places=2, default=0.4, max_digits=3),
                ),
                (
                    "inventory_weight",
                    models.DecimalField(decimal_places=2, default=0.3, max_digits=3),
                ),
                (
                    "fuel_cost_per_km",
                    models.DecimalField(decimal_places=2, default=1.5, max_digits=10),
                ),
                (
                    "driver_cost_per_hour",
                    models.DecimalField(decimal_places=2, default=25.0, max_digits=10),
                ),
                ("vehicle_capacity_kg", models.IntegerField(default=1000)),
                ("max_delivery_distance_km", models.IntegerField(default=500)),
                (
                    "risk_threshold_high",
                    models.DecimalField(decimal_places=2, default=0.8, max_digits=3),
                ),
                (
                    "risk_threshold_medium",
                    models.DecimalField(decimal_places=2, default=0.5, max_digits=3),
                ),
                ("alert_notification_enabled", models.BooleanField(default=True)),
                ("ai_model_update_frequency_hours", models.IntegerField(default=24)),
                ("data_retention_days", models.IntegerField(default=365)),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Supply Chain Configuration",
                "verbose_name_plural": "historical Supply Chain Configurations",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalSupplier",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("code", models.CharField(db_index=True, max_length=20)),
                ("contact_person", models.CharField(max_length=100)),
                ("email", models.EmailField(max_length=254)),
                ("phone", models.CharField(max_length=20)),
                ("address", models.TextField()),
                ("city", models.CharField(max_length=100)),
                ("state", models.CharField(max_length=100)),
                ("country", models.CharField(max_length=100)),
                ("postal_code", models.CharField(max_length=20)),
                (
                    "reliability_score",
                    models.CharField(
                        choices=[
                            ("excellent", "Excellent (95-100%)"),
                            ("good", "Good (85-94%)"),
                            ("average", "Average (70-84%)"),
                            ("poor", "Poor (<70%)"),
                        ],
                        default="average",
                        max_length=20,
                    ),
                ),
                ("avg_delivery_time_days", models.IntegerField(default=7)),
                (
                    "on_time_delivery_rate",
                    models.DecimalField(decimal_places=2, default=85.0, max_digits=5),
                ),
                (
                    "quality_score",
                    models.DecimalField(decimal_places=2, default=8.0, max_digits=5),
                ),
                (
                    "financial_stability",
                    models.DecimalField(decimal_places=2, default=0.8, max_digits=3),
                ),
                (
                    "geographic_risk",
                    models.DecimalField(decimal_places=2, default=0.2, max_digits=3),
                ),
                ("payment_terms_days", models.IntegerField(default=30)),
                (
                    "minimum_order_value",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=12),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Supplier",
                "verbose_name_plural": "historical Suppliers",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalRouteOptimization",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("route_name", models.CharField(max_length=100)),
                ("delivery_date", models.DateField()),
                (
                    "total_distance_km",
                    models.DecimalField(decimal_places=2, max_digits=8),
                ),
                (
                    "total_time_hours",
                    models.DecimalField(decimal_places=2, max_digits=6),
                ),
                ("total_cost", models.DecimalField(decimal_places=2, max_digits=10)),
                ("fuel_cost", models.DecimalField(decimal_places=2, max_digits=10)),
                ("driver_cost", models.DecimalField(decimal_places=2, max_digits=10)),
                ("algorithm_used", models.CharField(max_length=50)),
                (
                    "optimization_time_seconds",
                    models.DecimalField(decimal_places=2, max_digits=8),
                ),
                (
                    "cost_savings_percentage",
                    models.DecimalField(decimal_places=2, max_digits=5),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("optimizing", "Optimizing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("is_implemented", models.BooleanField(default=False)),
                ("implementation_feedback", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "start_location",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="ai_supply_chain.deliverylocation",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Route Optimization",
                "verbose_name_plural": "historical Route Optimizations",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalRiskFactor",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                (
                    "risk_type",
                    models.CharField(
                        choices=[
                            ("supplier", "Supplier Risk"),
                            ("logistics", "Logistics Risk"),
                            ("market", "Market Risk"),
                            ("financial", "Financial Risk"),
                            ("operational", "Operational Risk"),
                            ("external", "External Risk"),
                        ],
                        max_length=20,
                    ),
                ),
                ("description", models.TextField()),
                ("probability", models.DecimalField(decimal_places=3, max_digits=5)),
                ("impact_score", models.DecimalField(decimal_places=2, max_digits=5)),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        max_length=20,
                    ),
                ),
                ("monitoring_frequency_hours", models.IntegerField(default=24)),
                ("mitigation_strategy", models.TextField()),
                ("contingency_plan", models.TextField(blank=True)),
                ("is_active", models.BooleanField(default=True)),
                ("last_assessed", models.DateTimeField(blank=True, editable=False)),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Risk Factor",
                "verbose_name_plural": "historical Risk Factors",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalRiskAlert",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "alert_type",
                    models.CharField(
                        choices=[
                            ("demand_spike", "Demand Spike"),
                            ("supplier_delay", "Supplier Delay"),
                            ("stock_shortage", "Stock Shortage"),
                            ("price_volatility", "Price Volatility"),
                            ("route_disruption", "Route Disruption"),
                            ("quality_issue", "Quality Issue"),
                            ("external_event", "External Event"),
                        ],
                        max_length=20,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "confidence_score",
                    models.DecimalField(decimal_places=3, max_digits=5),
                ),
                ("risk_score", models.DecimalField(decimal_places=2, max_digits=5)),
                ("predicted_impact", models.TextField()),
                ("recommended_actions", models.JSONField(default=list)),
                (
                    "estimated_cost_impact",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=12, null=True
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("new", "New"),
                            ("acknowledged", "Acknowledged"),
                            ("investigating", "Investigating"),
                            ("resolved", "Resolved"),
                            ("false_positive", "False Positive"),
                        ],
                        default="new",
                        max_length=20,
                    ),
                ),
                ("resolution_notes", models.TextField(blank=True)),
                ("resolved_at", models.DateTimeField(blank=True, null=True)),
                ("email_sent", models.BooleanField(default=False)),
                ("sms_sent", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "assigned_to",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Risk Alert",
                "verbose_name_plural": "historical Risk Alerts",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalProduct",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("sku", models.CharField(db_index=True, max_length=50)),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("electronics", "Electronics"),
                            ("software", "Software"),
                            ("hardware", "Hardware"),
                            ("services", "Services"),
                            ("consumables", "Consumables"),
                        ],
                        max_length=20,
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("base_cost", models.DecimalField(decimal_places=2, max_digits=12)),
                ("current_price", models.DecimalField(decimal_places=2, max_digits=12)),
                ("min_price", models.DecimalField(decimal_places=2, max_digits=12)),
                ("max_price", models.DecimalField(decimal_places=2, max_digits=12)),
                ("current_stock", models.IntegerField(default=0)),
                ("reorder_level", models.IntegerField(default=10)),
                ("max_stock_level", models.IntegerField(default=1000)),
                (
                    "weight_kg",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=8),
                ),
                ("dimensions_cm", models.CharField(blank=True, max_length=50)),
                ("enable_demand_forecasting", models.BooleanField(default=True)),
                ("enable_dynamic_pricing", models.BooleanField(default=True)),
                ("seasonal_factor", models.JSONField(blank=True, default=dict)),
                (
                    "demand_volatility",
                    models.DecimalField(decimal_places=3, default=0.2, max_digits=5),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Product",
                "verbose_name_plural": "historical Products",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalDynamicPricing",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("current_price", models.DecimalField(decimal_places=2, max_digits=12)),
                ("current_stock_level", models.IntegerField()),
                (
                    "current_demand_rate",
                    models.DecimalField(decimal_places=2, max_digits=8),
                ),
                (
                    "recommended_price",
                    models.DecimalField(decimal_places=2, max_digits=12),
                ),
                (
                    "price_change_percentage",
                    models.DecimalField(decimal_places=2, max_digits=5),
                ),
                (
                    "pricing_strategy",
                    models.CharField(
                        choices=[
                            ("competitive", "Competitive Pricing"),
                            ("premium", "Premium Pricing"),
                            ("penetration", "Market Penetration"),
                            ("inventory_based", "Inventory-Based"),
                            ("demand_based", "Demand-Based"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "competitor_avg_price",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=12, null=True
                    ),
                ),
                ("market_price_trend", models.CharField(max_length=20)),
                (
                    "inventory_factor",
                    models.DecimalField(decimal_places=3, max_digits=5),
                ),
                ("demand_factor", models.DecimalField(decimal_places=3, max_digits=5)),
                (
                    "competition_factor",
                    models.DecimalField(decimal_places=3, max_digits=5),
                ),
                (
                    "seasonality_factor",
                    models.DecimalField(decimal_places=3, max_digits=5),
                ),
                (
                    "expected_demand_change",
                    models.DecimalField(decimal_places=2, max_digits=5),
                ),
                (
                    "expected_revenue_impact",
                    models.DecimalField(decimal_places=2, max_digits=12),
                ),
                (
                    "expected_profit_margin",
                    models.DecimalField(decimal_places=2, max_digits=5),
                ),
                ("is_applied", models.BooleanField(default=False)),
                ("applied_at", models.DateTimeField(blank=True, null=True)),
                ("valid_until", models.DateTimeField()),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="ai_supply_chain.product",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Dynamic Pricing",
                "verbose_name_plural": "historical Dynamic Pricing Recommendations",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalDemandForecast",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("forecast_date", models.DateField()),
                (
                    "forecast_type",
                    models.CharField(
                        choices=[
                            ("daily", "Daily"),
                            ("weekly", "Weekly"),
                            ("monthly", "Monthly"),
                            ("quarterly", "Quarterly"),
                        ],
                        max_length=20,
                    ),
                ),
                ("predicted_demand", models.IntegerField()),
                ("confidence_interval_lower", models.IntegerField()),
                ("confidence_interval_upper", models.IntegerField()),
                (
                    "confidence_score",
                    models.DecimalField(decimal_places=3, max_digits=5),
                ),
                (
                    "seasonal_factor",
                    models.DecimalField(decimal_places=3, default=1.0, max_digits=5),
                ),
                (
                    "trend_factor",
                    models.DecimalField(decimal_places=3, default=1.0, max_digits=5),
                ),
                (
                    "market_factor",
                    models.DecimalField(decimal_places=3, default=1.0, max_digits=5),
                ),
                ("model_version", models.CharField(max_length=20)),
                ("algorithm_used", models.CharField(max_length=50)),
                ("training_data_points", models.IntegerField()),
                ("actual_demand", models.IntegerField(blank=True, null=True)),
                (
                    "accuracy_score",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=5, null=True
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="ai_supply_chain.product",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Demand Forecast",
                "verbose_name_plural": "historical Demand Forecasts",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="DynamicPricing",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("current_price", models.DecimalField(decimal_places=2, max_digits=12)),
                ("current_stock_level", models.IntegerField()),
                (
                    "current_demand_rate",
                    models.DecimalField(decimal_places=2, max_digits=8),
                ),
                (
                    "recommended_price",
                    models.DecimalField(decimal_places=2, max_digits=12),
                ),
                (
                    "price_change_percentage",
                    models.DecimalField(decimal_places=2, max_digits=5),
                ),
                (
                    "pricing_strategy",
                    models.CharField(
                        choices=[
                            ("competitive", "Competitive Pricing"),
                            ("premium", "Premium Pricing"),
                            ("penetration", "Market Penetration"),
                            ("inventory_based", "Inventory-Based"),
                            ("demand_based", "Demand-Based"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "competitor_avg_price",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=12, null=True
                    ),
                ),
                ("market_price_trend", models.CharField(max_length=20)),
                (
                    "inventory_factor",
                    models.DecimalField(decimal_places=3, max_digits=5),
                ),
                ("demand_factor", models.DecimalField(decimal_places=3, max_digits=5)),
                (
                    "competition_factor",
                    models.DecimalField(decimal_places=3, max_digits=5),
                ),
                (
                    "seasonality_factor",
                    models.DecimalField(decimal_places=3, max_digits=5),
                ),
                (
                    "expected_demand_change",
                    models.DecimalField(decimal_places=2, max_digits=5),
                ),
                (
                    "expected_revenue_impact",
                    models.DecimalField(decimal_places=2, max_digits=12),
                ),
                (
                    "expected_profit_margin",
                    models.DecimalField(decimal_places=2, max_digits=5),
                ),
                ("is_applied", models.BooleanField(default=False)),
                ("applied_at", models.DateTimeField(blank=True, null=True)),
                ("valid_until", models.DateTimeField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pricing_recommendations",
                        to="ai_supply_chain.product",
                    ),
                ),
            ],
            options={
                "verbose_name": "Dynamic Pricing",
                "verbose_name_plural": "Dynamic Pricing Recommendations",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="DemandForecast",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("forecast_date", models.DateField()),
                (
                    "forecast_type",
                    models.CharField(
                        choices=[
                            ("daily", "Daily"),
                            ("weekly", "Weekly"),
                            ("monthly", "Monthly"),
                            ("quarterly", "Quarterly"),
                        ],
                        max_length=20,
                    ),
                ),
                ("predicted_demand", models.IntegerField()),
                ("confidence_interval_lower", models.IntegerField()),
                ("confidence_interval_upper", models.IntegerField()),
                (
                    "confidence_score",
                    models.DecimalField(decimal_places=3, max_digits=5),
                ),
                (
                    "seasonal_factor",
                    models.DecimalField(decimal_places=3, default=1.0, max_digits=5),
                ),
                (
                    "trend_factor",
                    models.DecimalField(decimal_places=3, default=1.0, max_digits=5),
                ),
                (
                    "market_factor",
                    models.DecimalField(decimal_places=3, default=1.0, max_digits=5),
                ),
                ("model_version", models.CharField(max_length=20)),
                ("algorithm_used", models.CharField(max_length=50)),
                ("training_data_points", models.IntegerField()),
                ("actual_demand", models.IntegerField(blank=True, null=True)),
                (
                    "accuracy_score",
                    models.DecimalField(
                        blank=True, decimal_places=3, max_digits=5, null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="demand_forecasts",
                        to="ai_supply_chain.product",
                    ),
                ),
            ],
            options={
                "verbose_name": "Demand Forecast",
                "verbose_name_plural": "Demand Forecasts",
                "ordering": ["-forecast_date"],
                "unique_together": {("product", "forecast_date", "forecast_type")},
            },
        ),
    ]
